<?php
/**
 * @file
 * Contains general functionality for this module.
 */

require_once('api/nd_genotypes.api.inc');

require_once('includes/nd_genotypes.mview.inc');
require_once('includes/nd_genotypes.mview.sync.inc');
require_once('includes/nd_genotypes.form_elements.inc');

require_once('includes/nd_genotypes.genotype_matrix.inc');
require_once('includes/nd_genotypes.genotype_matrix.download.inc');

/**
 * Implements hook_menu().
 */
function nd_genotypes_menu() {

  // Administration.
  $items['admin/tripal/extension/nd_genotypes'] = array(
    'title' => 'Natural Diversity Genotypes',
    'description' => 'Provides an interface for genotypes and the experiments that generate them.',
    'access arguments' => array('administer tripal'),
    'page callback' => 'nd_genotypes_admin_landing_page',
    'file' => 'includes/nd_genotypes.admin.inc'
  );

  $items['admin/tripal/extension/nd_genotypes/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nd_genotypes_admin_settings'),
    'access arguments' => array('administer tripal'),
    'weight' => 0,
    'file' => 'includes/nd_genotypes.admin.inc'
  );

  $items['admin/tripal/extension/nd_genotypes/sync'] = array(
    'title' => 'Sync',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nd_genotypes_admin_sync_mviews'),
    'access arguments' => array('administer tripal'),
    'weight' => 2,
    'file' => 'includes/nd_genotypes.admin.inc'
  );

  $items['admin/tripal/extension/nd_genotypes/help'] = array(
    'title' => 'Help',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'theme',
    'page arguments' => array('nd_genotypes__help'),
    'access arguments' => array('administer tripal'),
    'weight' => 4
  );

  // For auto-complete of germplasm that had been genotyped.
  $items['tripal_ajax/nd_genotypes/genotyped_germplasm/name_to_id/%/only'] = array(
    'title' => 'Germplasm Genotyped AJAX',
    'type' => MENU_CALLBACK,
    'page callback' => 'nd_genotypes_lookup_germplasm_name_callback',
    'page arguments' => array(4), //arg is partition
    'access arguments' => array('access content'),
    'weight' => 4
  );

  // For autocomplete of sequence backbone names.
  $items['tripal_ajax/nd_genotypes/genotyped_backbones/name_to_id/%/only'] = array(
    'title' => 'Backbones Genotyped AJAX',
    'type' => MENU_CALLBACK,
    'page callback' => 'nd_genotypes_lookup_backbone_name_callback',
    'page arguments' => array(4), //arg is partition
    'access arguments' => array('access content'),
    'weight' => 4
  );

  // For ajax loading of sequences.
  $items['node/%/ajax/sequences/%/%'] = array(
    'page callback' => 'nd_genotypes_get_sequence_pane_ajax_callback',
    'page arguments' => array(1, 4, 5),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access chado_feature content'),
  );

  // Add Marker x Germplasm Matrix links (1/organism synced)
  $sql = "
    SELECT *
      FROM {organism} O
    ORDER BY O.genus, O.species
  ";
  $orgs = chado_query($sql);
  foreach ($orgs as $organism) {

    // @PARTITION: We use the partition to determine if the mview tables are available
    // for this organism before making the page available.
    $partition = $organism->genus;
    if (ndg_mview_tables_exist($partition)) {

      $items['chado/genotype/' . $organism->genus] = array(
        'title' => $organism->genus . ' Genotypes',
        'description' => 'Marker by Germplasm Genotypes Search for ' . $organism->genus . ' species.',
        'page callback' => 'nd_genotype_matrix_page',
        'page arguments' => array($organism->genus),
        //'page callback' => 'drupal_get_form',
        //'page arguments' => array('nd_genotypes_matrix_filter_form', $organism->genus),
        'access arguments' => array('access nd_genotypes'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'includes/nd_genotypes.genotype_matrix.inc',
      );

     $items['chado/genotype/' . $organism->genus . '/csv'] = array(
       'title' => 'Download Genotypes: CSV',
       'page callback' => 'trpdownload_download_page',
       'page arguments' => array('genotype_matrix_csv', 4),
       'access arguments' => array('download nd_genotype_matrix'),
       'type' => MENU_CALLBACK,
      );
    }
  }


  return $items;
}

/**
 * Register any theme functions/templates for this module.
 * Implements hook_theme().
 */
function nd_genotypes_theme($existing, $type, $theme, $path) {
  $items = array();

  // Help Page
  // @todo: Update this page.
  $items['nd_genotypes__help'] = array(
    'template' => 'nd_genotypes--help',
    'path' => "$path/theme/templates",
  );

  // This is used for the "Germplasm" filter on the genotype matrix form.
  // It's a custom form element that lets you select multiple germplasm to be filtered on.
  $items['multiple_organism_stock'] = array(
    'render element' => 'element',
  );

  $items['pairwise_compare_germplasm'] = array(
    'render element' => 'element'
  );

  // This template executes the query as well as building the genotype matrix table.
  // The filter form is in nd_genotypes_matrix_filter_form().
  $items['nd_genotype_matrix'] = array(
    'template' => 'nd_genotypes.genotype_matrix',
    'path' => $path . '/theme/templates/',
  );

  // Features: Genotype pane
  $items['nd_genotypes_feature_genotypes'] = array(
    'variables' => array('node' => NULL),
    'template' => 'nd_genotypes_feature_genotypes',
    'path' => "$path/theme/templates",
  );

  // Features: Marked-up sequence pane
  $items['nd_genotypes_feature_sequence'] = array(
    'variables' => array('node' => NULL),
    'template' => 'nd_genotypes_feature_sequence',
    'path' => "$path/theme/templates",
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function nd_genotypes_permission() {
  return array(
    'access nd_genotypes' => array(
      'title' => t('Access ND Genotypes.'),
      'description' => t('Provides access to the genotype matrix page and Genotype/Sequence panes on feature pages.'),
    ),
    'download nd_genotype_matrix' => array(
      'title' => t('Download Genotypes.'),
      'description' => t('Allows bulk download of genotypes through the genotype matrix page.'),
    ),
  );
}

/**
 * Simple function to render the genotype matrix based on the template file.
 */
function nd_genotype_matrix_page($genus) {

  // @PARTITION: This is where the partition is set for the genotype matrix. From here
  // if is carried throughout the rest of the functions.
  $vars = array('genus' => $genus, 'partition' => $genus);

  // Add the CSS.
  drupal_add_css(drupal_get_path('module', 'nd_genotypes') . '/theme/css/nd_genotype_matrix.css');

  // Save the query paramters.
  $vars['q'] = drupal_get_query_parameters();

  // Process the query paramters to determine the defaults for the filter form
  // as well as to isolate the values that are needed to retrieve the data.
  nd_genotypes_process_query_parameters($vars);

  // Actually query whatever storage method you are currently using and retrieve the
  // data needed for the current page of the matrix.
  // Currently there is only one backend supported (postgresql: chado) so we will just
  // use it but things have been set-up this way to facilitate use of other backends
  // in the future as needed or desired.
  // ASSUMPTION: the following function should return a Variant X Germplasm Grid stored
  // in a 'data' associative array and a list of variant details in a 'variants'
  // associative array.
  if ($_SERVER['REQUEST_METHOD'] =='GET') {
    nd_genotypes_retrive_matrix_postgresql($vars);
  }

  return theme('nd_genotype_matrix', $vars);
}

/**
 * Implements hook_node_load().
 */
function nd_genotypes_node_load($nodes, $types) {

  if (in_array('chado_feature', $types)) {
    foreach ($nodes as $k => $node) {
      if ($node->type == 'chado_feature') {

        // @PARTITION: This is where the partition is set for the marker/variant node pages.
        // From here it is carried throughout the rest of the functions.
        $nodes[$k]->nd_partition = $node->feature->organism_id->genus;

      }
    }
  }
}

/**
 * Implements hook_node_view().
 * This is used to attache the Genotypes display to Marker/Variant pages.
 */
function nd_genotypes_node_view($node, $view_mode, $langcode) {

  // Only for chado features:
  if ($node->type == 'chado_feature') {

    // If all the nd mviews exist...
    if (ndg_mview_tables_exist($node->nd_partition)) {

      // And, we're viewing the full page of a marker or variant...
      if ($view_mode == 'full' AND in_array($node->feature->type_id->name, array('genetic_marker','SNP','indel'))) {

        // the tripal_natural_diversity module provides a tripal_feature_nd_genotype
        // template. if the tripal_natural_diversity content is present get rid of it as this
        // module superceeds it.
        if (array_key_exists('tripal_feature_nd_genotypes', $node->content)) {
          unset($node->content['tripal_feature_nd_genotypes']);
        }
        if (array_key_exists('tripal_feature_seqence', $node->content)) {
          unset($node->content['tripal_feature_seqence']);
        }

        if (user_access('access nd_genotypes')) {
          // Add the two genotype specific panes: Genotypes and Sequence.
          $node->content['nd_genotypes_feature_genotypes'] = array(
            '#theme' => 'nd_genotypes_feature_genotypes',
            '#node' => $node,
            '#tripal_toc_id'    => 'NDgenotypes',
            '#tripal_toc_title' => 'Genotypes',
          );
          // Sequence mark-up page
          $node->content['nd_genotypes_feature_sequence'] = array(
            '#theme' => 'nd_genotypes_feature_sequence',
            '#node' => $node,
            '#tripal_toc_id'    => 'sequence',
            '#tripal_toc_title' => 'Sequence',
          );
        }
      }
    }
  }
}

/**
 * Preprocessor: nd_genotypes_feature_sequence
 */
function nd_genotypes_preprocess_nd_genotypes_feature_sequence(&$variables) {

  // The maximum length fo sequence to show.
  $max_sequence_length = 500;

  // Is the current node a variant or a marker?
  $variant_types = unserialize(variable_get('nd_genotypes_variant_feature_types', 'a:0:{}'));
  $marker_types = unserialize(variable_get('nd_genotypes_marker_feature_types', 'a:0:{}'));
  $type_id = $variables['node']->feature->type_id->cvterm_id;
  $variables['type'] = NULL;
  if (isset($variant_types[$type_id])) {
    $variant_id = $variables['node']->feature->feature_id;
    $variables['type'] = 'variant';
  }
  elseif (isset($marker_types[$type_id])) {
    $variant_id = nd_genotypes_get_variant($variables['node']->feature->feature_id, TRUE);
    $variables['type'] = 'marker';
  }
  else {
    return;
  }

  // First get a list of featurelocs where the srcfeature has sequence.
  $variables['locations'] = chado_query('
    SELECT l.featureloc_id, l.srcfeature_id, p.name as backbone_name, l.fmin, l.fmax, l.locgroup, l.strand as strand
    FROM {featureloc} l
    LEFT JOIN {feature} p ON p.feature_id=l.srcfeature_id
    WHERE l.feature_id=:id AND p.residues IS NOT NULL
    ORDER BY locgroup ASC, p.name ASC',
    array(':id' => $variables['node']->feature->feature_id))->fetchAll();

  // Then pick the one with locgroup 0 and display it by default.
  $variables['current_location'] = reset($variables['locations']);
  // Next, if the current location is set we would like to use that instead of the default ;-)
  $q = drupal_get_query_parameters();
  if (isset($q['seq-loc'])) {
    foreach ($variables['locations'] as $k => $loc) {
      $loc_string = $loc->backbone_name . ':' . $loc->fmin . '-' . $loc->fmax;
      if ($loc_string == $q['seq-loc']) {
        $variables['current_location'] = $variables['locations'][$k];
      }
    }
  }
  elseif (isset($variables['location'])) {
    foreach ($variables['locations'] as $k => $loc) {
      $loc_string = $loc->backbone_name . ':' . $loc->fmin . '-' . $loc->fmax;
      if ($loc_string == $variables['location']) {
        $variables['current_location'] = $variables['locations'][$k];
      }
    }
  }

  $srcfeature = chado_query('
    SELECT
      f.feature_id,
      f.name,
      f.uniquename,
      (fmin::int-250) as substring_start,
      substring(residues from fmin::int+1-250 for 500) as residues,
      cf.nid,
      cvt.name as type_name
    FROM {featureloc} fl
      LEFT JOIN {feature} f ON f.feature_id=fl.srcfeature_id
      LEFT JOIN {cvterm} cvt ON cvt.cvterm_id=f.type_id
      LEFT JOIN [chado_feature] cf ON cf.feature_id=f.feature_id
    WHERE fl.feature_id=:id AND fl.srcfeature_id=:parent',
  array(':id' => $variant_id, ':parent' => $variables['current_location']->srcfeature_id))->fetchObject();

  if (!$srcfeature OR empty($srcfeature->residues)) {
    $variables['sequence'] = '';
    return;
  }

  // Defaults.
  $variables['sequence_feature_name'] = $srcfeature->name;
  $variables['fasta_description'] = 'The following sequence is that of the ' . $srcfeature->type_name
      . ' <strong>without any variants taken into account</strong>.';
  $variables['marked_description'] = '';
  $variables['sequence'] = $srcfeature->residues;

  // Do some checks on the sequence to handle "edge" (literally ;-)) cases.
  if ($srcfeature->substring_start < 0) {
    $srcfeature->substring_start = 0;
  }

  if ($srcfeature->residues) {
      $variables['sequence_range'] = array(
        'feature_id' => $srcfeature->feature_id,
        'feature_name' => $srcfeature->name,
        'start' => $srcfeature->substring_start,
        'end' => $srcfeature->substring_start + strlen($srcfeature->residues) -1,
        'length' => $max_sequence_length,
        'full_sequence' => FALSE,
        'variant_id' => $variant_id,
        'strand' => 1, // assume the positive strand.
      );
   }
   else {
      tripal_report_error(
        'nd_genotypes',
        TRIPAL_WARNING,
        'Unable to determine the sequence for the :category :name (:id)',
        array(
          ':category' => $variables['type'],
          ':name' => $variables['node']->feature->name,
          ':id' => $variables['node']->feature->feature_id
        )
      );
      return '';
  }

  if ($variables['sequence']) {
    $variables['fasta_header'] = '>' . $variables['sequence_range']['feature_name'] . ':' . ($variables['sequence_range']['start']+1) . '-' . $variables['sequence_range']['end'] . ' (' . $variables['node']->feature->uniquename . ': ' . $variables['node']->feature->type_id->name . ')';

    // Add the marked-up sequence
    $variables['sequence_range'] = array_merge($variables['sequence_range'], array('sequence' => $variables['sequence']));
    $variables['sequence_with_variants'] = nd_genotypes_markup_sequence_with_variants(
      $variables['node']->feature,
      $variables['sequence_range'],
      $variables['type'],
      $variables['node']->nd_partition
    );
  }
}

/**
 * Preprocessor: nd_genotypes_feature_sequence
 */
function nd_genotypes_preprocess_nd_genotypes_feature_genotypes(&$variables) {
  $type_id = $variables['node']->feature->type_id->cvterm_id;

  // Is the current node a variant or a marker?
  $variant_types = unserialize(variable_get('nd_genotypes_variant_feature_types', 'a:0:{}'));
  $marker_types = unserialize(variable_get('nd_genotypes_marker_feature_types', 'a:0:{}'));
  $variables['type'] = NULL;
  $variables['marker_type'] = NULL;
  if (isset($variant_types[$type_id])) {
    $variant_id = $variables['node']->feature->feature_id;
    $variables['type'] = 'variant';
  }
  elseif (isset($marker_types[$type_id])) {
    $variant_id = nd_genotypes_get_variant($variables['node']->feature->feature_id, TRUE);
    $variables['type'] = 'marker';
    $variables['marker_type'] = nd_genotypes_get_marker_type($variables['node']->feature->feature_id);
  }
  else {
    return;
  }

  $variables['variant'] = nd_genotypes_get_alleles_for_variant($variant_id, $variables['node']->nd_partition);
  $variables['variant']['variant_nid'] = chado_get_nid_from_id('feature', $variables['variant']['variant_id']);

  // Check if there are arn't genotypes and
  // if not, tell the template so she can not add the Genotypes pane.
  $variables['no_genotypes'] = FALSE;
  if (!$variables['variant']) {
    $variables['no_genotypes'] = TRUE;
    return;
  }

  $data = array();
  foreach ($variables['variant']['marker_alleles'] as $marker_name => $alleles) {
    if ($variables['type'] == 'variant' OR $marker_name == $variables['node']->feature->name) {
      $tmp = array();
      $tmp['label'] = $marker_name;
      $tmp['portions'] = array();
      foreach ($alleles as $d) {
        $tmp['portions'][] = array(
          'label' => $d['allele'],
          'num' => $d['num_germplasm'],
          'class' => 'marker-name'
        );
      }
      $data[] = $tmp;
    }
  }
  $variables['js_data'] = $data;
  drupal_add_js(array('nd_genotypes' => array('genotypes' => $data)), 'setting');

  drupal_add_js('http://d3js.org/d3.v3.js');
  if ($variables['type'] == 'marker') {
    drupal_add_js(drupal_get_path('module','nd_genotypes').'/theme/js/genotypeFeatureSinglePieChart.js');
  }
  else {
    drupal_add_js(drupal_get_path('module','nd_genotypes').'/theme/js/genotypeFeatureMultiPieChart.js');
  }

}

/**
 * Auto-complete: Look-up names of germplasm genotyped.
 */
function nd_genotypes_lookup_germplasm_name_callback($partition, $string = "") {
  $matches = array();
  if (!empty($partition) AND trim($string)) {
    $result = ndg_mview_query($partition, '
      SELECT germplasm_name
      FROM {mview_ndg_germplasm_genotyped} m
      WHERE germplasm_name ~* :query AND partition = :partition
      LIMIT 10
    ', array(':query' => $string, ':partition' => $partition))->fetchCol();
    foreach ($result as $name) {
      $matches[$name] = $name;
    }
  }

  drupal_json_output($matches);
}

/**
 * Auto-complete: Look-up names of backbones genotyped.
 */
function nd_genotypes_lookup_backbone_name_callback($partition, $string = "") {
  $matches = array();
  if (!empty($partition) AND trim($string)) {
    $result = ndg_mview_query($partition, '
      SELECT srcfeature_name as name
      FROM {mview_ndg_variants} m
      WHERE srcfeature_name ~* :query
      GROUP BY srcfeature_name
      LIMIT 10
    ', array(':query' => $string))->fetchCol();
    foreach ($result as $name) {
      $matches[$name] = $name;
    }
  }

  drupal_json_output($matches);
}

/**
 * Ajax Callback: Deliver the sequence pane via ajax to allow for seamless switching
 * between locations.
 */
function nd_genotypes_get_sequence_pane_ajax_callback($nid, $location, $ajax) {

  // First render the sequence content only.
  $node = node_load($nid);
  $content = theme('nd_genotypes_feature_sequence', array('node' => $node, 'location' => $location));

  // If the use has ajax available then provide the content via agax!
  if ($ajax == 'ajax') {

    $commands = array();
    // Ajax command to replace the #ajax-display element with the current time.
    $commands[] = ajax_command_replace('#sequence-tripal-data-pane-content', $content);
    // Add a visual "changed" marker to the '#ajax-display' element.
    $commands[] = ajax_command_changed('#sequence-tripal-data-pane-content');

    // Menu 'page callback' and #ajax['callback'] functions are supposed to
    // return render arrays. If returning an Ajax commands array, it must be
    // encapsulated in a render array structure.
    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
  }
  else {
    // No ajax, just display the content.
    return array(
      '#markup' => $content,
    );
  }
}
