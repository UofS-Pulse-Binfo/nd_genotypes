<?php
/**
 * @file
 * Contains general functionality for this module.
 */

require_once('api/nd_genotypes.api.inc');

require_once('includes/nd_genotypes.mview.inc');
require_once('includes/nd_genotypes.mview.sync.inc');
require_once('includes/nd_genotypes.form_elements.inc');

require_once('includes/nd_genotypes.genotype_matrix.inc');
require_once('includes/nd_genotypes.genotype_matrix.download.inc');

/**
 * Implements hook_menu().
 */
function nd_genotypes_menu() {

  // Administration.
  $items['admin/tripal/extension/nd_genotypes'] = array(
    'title' => 'Natural Diversity Genotypes',
    'description' => 'Provides an interface for genotypes and the experiments that generate them.',
    'access arguments' => array('administer tripal'),
    'page callback' => 'nd_genotypes_admin_landing_page',
    'file' => 'includes/nd_genotypes.admin.inc'
  );

  $items['admin/tripal/extension/nd_genotypes/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nd_genotypes_admin_settings'),
    'access arguments' => array('administer tripal'),
    'weight' => 0,
    'file' => 'includes/nd_genotypes.admin.inc'
  );

  $items['admin/tripal/extension/nd_genotypes/sync'] = array(
    'title' => 'Sync',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nd_genotypes_admin_sync_mviews'),
    'access arguments' => array('administer tripal'),
    'weight' => 2,
    'file' => 'includes/nd_genotypes.admin.inc'
  );

  $items['admin/tripal/extension/nd_genotypes/help'] = array(
    'title' => 'Help',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'theme',
    'page arguments' => array('nd_genotypes__help'),
    'access arguments' => array('administer tripal'),
    'weight' => 4
  );

  // Add Marker x Germplasm Matrix links (1/organism synced)
  $sql = "
    SELECT *
    FROM [chado_organism] CO
      INNER JOIN {organism} O ON O.organism_id = CO.organism_id
    ORDER BY O.genus, O.species
  ";
  $orgs = chado_query($sql);
  foreach ($orgs as $organism) {
    $items['chado/genotype/' . $organism->genus] = array(
      'title' => $organism->genus . ' Genotypes',
      'description' => 'Marker by Germplasm Genotypes Search for ' . $organism->genus . ' species.',
      'page callback' => 'nd_genotype_matrix_page',
      'page arguments' => array($organism->genus),
      //'page callback' => 'drupal_get_form',
      //'page arguments' => array('nd_genotypes_matrix_filter_form', $organism->genus),
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/nd_genotypes.genotype_matrix.inc',
    );

   $items['chado/genotype/' . $organism->genus . '/csv'] = array(
     'title' => 'Download Genotypes: CSV',
     'page callback' => 'trpdownload_download_page',
     'page arguments' => array('genotype_matrix_csv', 4),
     'access arguments' => array('access content'),
     'type' => MENU_CALLBACK,
    );
  }

  return $items;
}

/**
 * Register any theme functions/templates for this module.
 * Implements hook_theme().
 */
function nd_genotypes_theme($existing, $type, $theme, $path) {
  $items = array();

  // Help Page
  // @todo: Update this page.
  $items['nd_genotypes__help'] = array(
    'template' => 'nd_genotypes--help',
    'path' => "$path/theme/templates",
  );

  // This is used for the "Germplasm" filter on the genotype matrix form.
  // It's a custom form element that lets you select multiple germplasm to be filtered on.
  $items['multiple_organism_stock'] = array(
    'render element' => 'element',
  );

  // This template executes the query as well as building the genotype matrix table.
  // The filter form is in nd_genotypes_matrix_filter_form().
  $items['nd_genotype_matrix'] = array(
    'template' => 'nd_genotypes.genotype_matrix',
    'path' => $path . '/theme/templates/',
  );

  // Features: Genotype pane
  $items['nd_genotypes_feature_genotypes'] = array(
    'variables' => array('node' => NULL),
    'template' => 'nd_genotypes_feature_genotypes',
    'path' => "$path/theme/templates",
  );

  // Features: Marked-up sequence pane
  $items['nd_genotypes_feature_sequence'] = array(
    'variables' => array('node' => NULL),
    'template' => 'nd_genotypes_feature_sequence',
    'path' => "$path/theme/templates",
  );

  return $items;
}

/**
 * Simple function to render the genotype matrix based on the template file.
 */
function nd_genotype_matrix_page($genus) {
  return theme('nd_genotype_matrix', array('genus' => $genus));
}

/**
 * Preprocess hook for nd_genotypes.genotype_matrix.tpl.php
 *
 * This function processes data from the URL into a more usable form. Each key in the
 * $vars array is made available as a variable in the template file.
 */
function nd_genotypes_preprocess_nd_genotype_matrix(&$vars) {

  // Add the CSS.
  drupal_add_css(drupal_get_path('module', 'nd_genotypes') . '/theme/css/nd_genotype_matrix.css');

  // Save the query paramters.
  $vars['q'] = drupal_get_query_parameters();

  nd_genotypes_process_query_parameters($vars);

}

/**
 * Implements hook_node_view().
 * This is used to attache the Genotypes display to Marker/Variant pages.
 */
function nd_genotypes_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'chado_feature':
      if ($view_mode == 'full' AND in_array($node->feature->type_id->name, array('genetic_marker','SNP','indel'))) {

        // the tripal_natural_diversity module provides a tripal_feature_nd_genotype
        // template. if the tripal_natural_diversity content is present get rid of it as this
        // module superceeds it.
        if (array_key_exists('tripal_feature_nd_genotypes', $node->content)) {
          unset($node->content['tripal_feature_nd_genotypes']);
        }
        if (array_key_exists('tripal_feature_seqence', $node->content)) {
          unset($node->content['tripal_feature_seqence']);
        }

       // Add the two genotype specific panes: Genotypes and Sequence.
       $node->content['nd_genotypes_feature_genotypes'] = array(
          '#theme' => 'nd_genotypes_feature_genotypes',
          '#node' => $node,
          '#tripal_toc_id'    => 'genotypes',
          '#tripal_toc_title' => 'Genotypes',
        );
        // Sequence mark-up page
        $node->content['nd_genotypes_feature_sequence'] = array(
          '#theme' => 'nd_genotypes_feature_sequence',
          '#node' => $node,
          '#tripal_toc_id'    => 'sequence',
          '#tripal_toc_title' => 'Sequence',
        );
      }
    break;
  }
}

/**
 * Preprocessor: nd_genotypes_feature_sequence
 */
function nd_genotypes_preprocess_nd_genotypes_feature_sequence(&$variables) {

  // The maximum length fo sequence to show.
  $max_sequence_length = 500;

  // Is the current node a variant or a marker?
  $variant_types = unserialize(variable_get('nd_genotypes_variant_feature_types', 'a:0:{}'));
  $marker_types = unserialize(variable_get('nd_genotypes_marker_feature_types', 'a:0:{}'));
  $type_id = $variables['node']->feature->type_id->cvterm_id;
  $variables['type'] = NULL;
  if (isset($variant_types[$type_id])) {
    $variant_id = $variables['node']->feature->feature_id;
    $variables['type'] = 'variant';
  }
  elseif (isset($marker_types[$type_id])) {
    $variant_id = nd_genotypes_get_variant($variables['node']->feature->feature_id, TRUE);
    $variables['type'] = 'marker';
  }
  else {
    return;
  }

  $srcfeature = chado_query('
    SELECT
      f.feature_id,
      f.name,
      f.uniquename,
      (fmin::int-250) as substring_start,
      substring(residues from fmin::int-250 for 500) as residues,
      cf.nid,
      cvt.name as type_name
    FROM {featureloc} fl
      LEFT JOIN {feature} f ON f.feature_id=fl.srcfeature_id
      LEFT JOIN {cvterm} cvt ON cvt.cvterm_id=f.type_id
      LEFT JOIN [chado_feature] cf ON cf.feature_id=f.feature_id
    WHERE fl.feature_id=:id',
  array(':id' => $variant_id))->fetchObject();

  if (!$srcfeature OR empty($srcfeature->residues)) {
    $variables['sequence'] = '';
    return;
  }

  // Defaults.
  $variables['sequence_feature_name'] = $srcfeature->name;
  $variables['fasta_description'] = 'The following sequence is that of the ' . $srcfeature->type_name
      . ' <strong>without any variants taken into account</strong>.';
  $variables['marked_description'] = '';
  $variables['sequence'] = $srcfeature->residues;

  // Do some checks on the sequence to handle "edge" (literally ;-)) cases.
  if ($srcfeature->substring_start < 0) {
    $srcfeature->substring_start = 0;
  }

  if ($srcfeature->residues) {
      $variables['sequence_range'] = array(
        'feature_id' => $srcfeature->feature_id,
        'feature_name' => $srcfeature->name,
        'start' => $srcfeature->substring_start,
        'end' => $srcfeature->substring_start + strlen($srcfeature->residues) -1,
        'length' => $max_sequence_length,
        'full_sequence' => FALSE,
        'variant_id' => $variant_id,
      );
   }
   else {
      tripal_report_error(
        'nd_genotypes',
        TRIPAL_WARNING,
        'Unable to determine the sequence for the :category :name (:id)',
        array(
          ':category' => $variables['type'],
          ':name' => $variables['node']->feature->name,
          ':id' => $variables['node']->feature->feature_id
        )
      );
      return '';
  }

  if ($variables['sequence']) {
    $variables['fasta_header'] = '>' . $variables['sequence_range']['feature_name'] . ':' . ($variables['sequence_range']['start']+1) . '-' . $variables['sequence_range']['end'] . ' (' . $variables['node']->feature->uniquename . ': ' . $variables['node']->feature->type_id->name . ')';

    // Add the marked-up sequence
    $variables['sequence_range'] = array_merge($variables['sequence_range'], array('sequence' => $variables['sequence']));
    $variables['sequence_with_variants'] = nd_genotypes_markup_sequence_with_variants(
      $variables['node']->feature,
      $variables['sequence_range'],
      $variables['type']
    );
  }
}

/**
 * Preprocessor: nd_genotypes_feature_sequence
 */
function nd_genotypes_preprocess_nd_genotypes_feature_genotypes(&$variables) {
  $type_id = $variables['node']->feature->type_id->cvterm_id;

  // Is the current node a variant or a marker?
  $variant_types = unserialize(variable_get('nd_genotypes_variant_feature_types', 'a:0:{}'));
  $marker_types = unserialize(variable_get('nd_genotypes_marker_feature_types', 'a:0:{}'));
  $variables['type'] = NULL;
  $variables['marker_type'] = NULL;
  if (isset($variant_types[$type_id])) {
    $variant_id = $variables['node']->feature->feature_id;
    $variables['type'] = 'variant';
  }
  elseif (isset($marker_types[$type_id])) {
    $variant_id = nd_genotypes_get_variant($variables['node']->feature->feature_id, TRUE);
    $variables['type'] = 'marker';
    $variables['marker_type'] = nd_genotypes_get_marker_type($variables['node']->feature->feature_id);
  }
  else {
    return;
  }

  $variables['variant'] = nd_genotypes_get_alleles_for_variant($variant_id);

  // Check if there are arn't genotypes and
  // if not, tell the template so she can not add the Genotypes pane.
  $variables['no_genotypes'] = FALSE;
  if (!$variables['variant']) {
    $variables['no_genotypes'] = TRUE;
    return;
  }

  $data = array();
  foreach ($variables['variant']['marker_alleles'] as $type => $alleles) {
    if ($variables['type'] == 'variant' OR $type == $variables['marker_type']) {
      $tmp = array();
      $tmp['label'] = $type;
      $tmp['portions'] = array();
      foreach ($alleles as $d) {
        $tmp['portions'][] = array(
          'label' => $d['allele'],
          'num' => $d['num_germplasm'],
          'class' => 'marker-type'
        );
      }
      $data[] = $tmp;
    }
  }
  $variables['js_data'] = $data;
  drupal_add_js(array('nd_genotypes' => array('genotypes' => $data)), 'setting');

  drupal_add_js('http://d3js.org/d3.v3.js');
  if (sizeof($data) == 1) {
    drupal_add_js(drupal_get_path('module','nd_genotypes').'/theme/js/genotypeFeatureSinglePieChart.js');
  }
  else {
    drupal_add_js(drupal_get_path('module','nd_genotypes').'/theme/js/genotypeFeatureMultiPieChart.js');
  }

}
